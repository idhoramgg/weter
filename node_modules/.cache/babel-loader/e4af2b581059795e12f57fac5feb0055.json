{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar is = require('is_js');\n/**\n * Parse x-forwarded-for headers.\n *\n * @param {string} value - The value to be parsed.\n * @return {string|null} First known IP address, if any.\n */\n\n\nfunction getClientIpFromXForwardedFor(value) {\n  if (!is.existy(value)) {\n    return null;\n  }\n\n  if (is.not.string(value)) {\n    throw new TypeError(\"Expected a string, got \\\"\".concat(_typeof(value), \"\\\"\"));\n  } // x-forwarded-for may return multiple IP addresses in the format:\n  // \"client IP, proxy 1 IP, proxy 2 IP\"\n  // Therefore, the right-most IP address is the IP address of the most recent proxy\n  // and the left-most IP address is the IP address of the originating client.\n  // source: http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html\n  // Azure Web App's also adds a port for some reason, so we'll only use the first part (the IP)\n\n\n  var forwardedIps = value.split(',').map(function (e) {\n    var ip = e.trim();\n\n    if (ip.includes(':')) {\n      var splitted = ip.split(':'); // make sure we only use this if it's ipv4 (ip:port)\n\n      if (splitted.length === 2) {\n        return splitted[0];\n      }\n    }\n\n    return ip;\n  }); // Sometimes IP addresses in this header can be 'unknown' (http://stackoverflow.com/a/11285650).\n  // Therefore taking the left-most IP address that is not unknown\n  // A Squid configuration directive can also set the value to \"unknown\" (http://www.squid-cache.org/Doc/config/forwarded_for/)\n\n  return forwardedIps.find(is.ip);\n}\n/**\n * Determine client IP address.\n *\n * @param req\n * @returns {string} ip - The IP address if known, defaulting to empty string if unknown.\n */\n\n\nfunction getClientIp(req) {\n  // Server is probably behind a proxy.\n  if (req.headers) {\n    // Standard headers used by Amazon EC2, Heroku, and others.\n    if (is.ip(req.headers['x-client-ip'])) {\n      return req.headers['x-client-ip'];\n    } // Load-balancers (AWS ELB) or proxies.\n\n\n    var xForwardedFor = getClientIpFromXForwardedFor(req.headers['x-forwarded-for']);\n\n    if (is.ip(xForwardedFor)) {\n      return xForwardedFor;\n    } // Cloudflare.\n    // @see https://support.cloudflare.com/hc/en-us/articles/200170986-How-does-Cloudflare-handle-HTTP-Request-headers-\n    // CF-Connecting-IP - applied to every request to the origin.\n\n\n    if (is.ip(req.headers['cf-connecting-ip'])) {\n      return req.headers['cf-connecting-ip'];\n    } // Fastly and Firebase hosting header (When forwared to cloud function)\n\n\n    if (is.ip(req.headers['fastly-client-ip'])) {\n      return req.headers['fastly-client-ip'];\n    } // Akamai and Cloudflare: True-Client-IP.\n\n\n    if (is.ip(req.headers['true-client-ip'])) {\n      return req.headers['true-client-ip'];\n    } // Default nginx proxy/fcgi; alternative to x-forwarded-for, used by some proxies.\n\n\n    if (is.ip(req.headers['x-real-ip'])) {\n      return req.headers['x-real-ip'];\n    } // (Rackspace LB and Riverbed's Stingray)\n    // http://www.rackspace.com/knowledge_center/article/controlling-access-to-linux-cloud-sites-based-on-the-client-ip-address\n    // https://splash.riverbed.com/docs/DOC-1926\n\n\n    if (is.ip(req.headers['x-cluster-client-ip'])) {\n      return req.headers['x-cluster-client-ip'];\n    }\n\n    if (is.ip(req.headers['x-forwarded'])) {\n      return req.headers['x-forwarded'];\n    }\n\n    if (is.ip(req.headers['forwarded-for'])) {\n      return req.headers['forwarded-for'];\n    }\n\n    if (is.ip(req.headers.forwarded)) {\n      return req.headers.forwarded;\n    }\n  } // Remote address checks.\n\n\n  if (is.existy(req.connection)) {\n    if (is.ip(req.connection.remoteAddress)) {\n      return req.connection.remoteAddress;\n    }\n\n    if (is.existy(req.connection.socket) && is.ip(req.connection.socket.remoteAddress)) {\n      return req.connection.socket.remoteAddress;\n    }\n  }\n\n  if (is.existy(req.socket) && is.ip(req.socket.remoteAddress)) {\n    return req.socket.remoteAddress;\n  }\n\n  if (is.existy(req.info) && is.ip(req.info.remoteAddress)) {\n    return req.info.remoteAddress;\n  } // AWS Api Gateway + Lambda\n\n\n  if (is.existy(req.requestContext) && is.existy(req.requestContext.identity) && is.ip(req.requestContext.identity.sourceIp)) {\n    return req.requestContext.identity.sourceIp;\n  }\n\n  return null;\n}\n/**\n * Expose request IP as a middleware.\n *\n * @param {object} [options] - Configuration.\n * @param {string} [options.attributeName] - Name of attribute to augment request object with.\n * @return {*}\n */\n\n\nfunction mw(options) {\n  // Defaults.\n  var configuration = is.not.existy(options) ? {} : options; // Validation.\n\n  if (is.not.object(configuration)) {\n    throw new TypeError('Options must be an object!');\n  }\n\n  var attributeName = configuration.attributeName || 'clientIp';\n  return function (req, res, next) {\n    var ip = getClientIp(req);\n    Object.defineProperty(req, attributeName, {\n      get: function get() {\n        return ip;\n      },\n      configurable: true\n    });\n    next();\n  };\n}\n\nmodule.exports = {\n  getClientIpFromXForwardedFor: getClientIpFromXForwardedFor,\n  getClientIp: getClientIp,\n  mw: mw\n};","map":{"version":3,"sources":["/home/ridho/Desktop/ridh0/suhuu/node_modules/request-ip/dist/index.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","is","require","getClientIpFromXForwardedFor","value","existy","not","string","TypeError","concat","forwardedIps","split","map","e","ip","trim","includes","splitted","length","find","getClientIp","req","headers","xForwardedFor","forwarded","connection","remoteAddress","socket","info","requestContext","identity","sourceIp","mw","options","configuration","object","attributeName","res","next","Object","defineProperty","get","configurable","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar is = require('is_js');\n/**\n * Parse x-forwarded-for headers.\n *\n * @param {string} value - The value to be parsed.\n * @return {string|null} First known IP address, if any.\n */\n\n\nfunction getClientIpFromXForwardedFor(value) {\n  if (!is.existy(value)) {\n    return null;\n  }\n\n  if (is.not.string(value)) {\n    throw new TypeError(\"Expected a string, got \\\"\".concat(_typeof(value), \"\\\"\"));\n  } // x-forwarded-for may return multiple IP addresses in the format:\n  // \"client IP, proxy 1 IP, proxy 2 IP\"\n  // Therefore, the right-most IP address is the IP address of the most recent proxy\n  // and the left-most IP address is the IP address of the originating client.\n  // source: http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html\n  // Azure Web App's also adds a port for some reason, so we'll only use the first part (the IP)\n\n\n  var forwardedIps = value.split(',').map(function (e) {\n    var ip = e.trim();\n\n    if (ip.includes(':')) {\n      var splitted = ip.split(':'); // make sure we only use this if it's ipv4 (ip:port)\n\n      if (splitted.length === 2) {\n        return splitted[0];\n      }\n    }\n\n    return ip;\n  }); // Sometimes IP addresses in this header can be 'unknown' (http://stackoverflow.com/a/11285650).\n  // Therefore taking the left-most IP address that is not unknown\n  // A Squid configuration directive can also set the value to \"unknown\" (http://www.squid-cache.org/Doc/config/forwarded_for/)\n\n  return forwardedIps.find(is.ip);\n}\n/**\n * Determine client IP address.\n *\n * @param req\n * @returns {string} ip - The IP address if known, defaulting to empty string if unknown.\n */\n\n\nfunction getClientIp(req) {\n  // Server is probably behind a proxy.\n  if (req.headers) {\n    // Standard headers used by Amazon EC2, Heroku, and others.\n    if (is.ip(req.headers['x-client-ip'])) {\n      return req.headers['x-client-ip'];\n    } // Load-balancers (AWS ELB) or proxies.\n\n\n    var xForwardedFor = getClientIpFromXForwardedFor(req.headers['x-forwarded-for']);\n\n    if (is.ip(xForwardedFor)) {\n      return xForwardedFor;\n    } // Cloudflare.\n    // @see https://support.cloudflare.com/hc/en-us/articles/200170986-How-does-Cloudflare-handle-HTTP-Request-headers-\n    // CF-Connecting-IP - applied to every request to the origin.\n\n\n    if (is.ip(req.headers['cf-connecting-ip'])) {\n      return req.headers['cf-connecting-ip'];\n    } // Fastly and Firebase hosting header (When forwared to cloud function)\n\n\n    if (is.ip(req.headers['fastly-client-ip'])) {\n      return req.headers['fastly-client-ip'];\n    } // Akamai and Cloudflare: True-Client-IP.\n\n\n    if (is.ip(req.headers['true-client-ip'])) {\n      return req.headers['true-client-ip'];\n    } // Default nginx proxy/fcgi; alternative to x-forwarded-for, used by some proxies.\n\n\n    if (is.ip(req.headers['x-real-ip'])) {\n      return req.headers['x-real-ip'];\n    } // (Rackspace LB and Riverbed's Stingray)\n    // http://www.rackspace.com/knowledge_center/article/controlling-access-to-linux-cloud-sites-based-on-the-client-ip-address\n    // https://splash.riverbed.com/docs/DOC-1926\n\n\n    if (is.ip(req.headers['x-cluster-client-ip'])) {\n      return req.headers['x-cluster-client-ip'];\n    }\n\n    if (is.ip(req.headers['x-forwarded'])) {\n      return req.headers['x-forwarded'];\n    }\n\n    if (is.ip(req.headers['forwarded-for'])) {\n      return req.headers['forwarded-for'];\n    }\n\n    if (is.ip(req.headers.forwarded)) {\n      return req.headers.forwarded;\n    }\n  } // Remote address checks.\n\n\n  if (is.existy(req.connection)) {\n    if (is.ip(req.connection.remoteAddress)) {\n      return req.connection.remoteAddress;\n    }\n\n    if (is.existy(req.connection.socket) && is.ip(req.connection.socket.remoteAddress)) {\n      return req.connection.socket.remoteAddress;\n    }\n  }\n\n  if (is.existy(req.socket) && is.ip(req.socket.remoteAddress)) {\n    return req.socket.remoteAddress;\n  }\n\n  if (is.existy(req.info) && is.ip(req.info.remoteAddress)) {\n    return req.info.remoteAddress;\n  } // AWS Api Gateway + Lambda\n\n\n  if (is.existy(req.requestContext) && is.existy(req.requestContext.identity) && is.ip(req.requestContext.identity.sourceIp)) {\n    return req.requestContext.identity.sourceIp;\n  }\n\n  return null;\n}\n/**\n * Expose request IP as a middleware.\n *\n * @param {object} [options] - Configuration.\n * @param {string} [options.attributeName] - Name of attribute to augment request object with.\n * @return {*}\n */\n\n\nfunction mw(options) {\n  // Defaults.\n  var configuration = is.not.existy(options) ? {} : options; // Validation.\n\n  if (is.not.object(configuration)) {\n    throw new TypeError('Options must be an object!');\n  }\n\n  var attributeName = configuration.attributeName || 'clientIp';\n  return function (req, res, next) {\n    var ip = getClientIp(req);\n    Object.defineProperty(req, attributeName, {\n      get: function get() {\n        return ip;\n      },\n      configurable: true\n    });\n    next();\n  };\n}\n\nmodule.exports = {\n  getClientIpFromXForwardedFor: getClientIpFromXForwardedFor,\n  getClientIp: getClientIp,\n  mw: mw\n};\n\n"]},"metadata":{},"sourceType":"script"}